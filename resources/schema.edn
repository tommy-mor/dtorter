{:objects
 {:Tag
  {:description "a collection of items"
   :fields
   {:id {:type (non-null ID)}
    :name {:type (non-null String)}
    :description {:type String}
    :members {:type (list :Item)
              :resolve :query/items-for-tag}
    :votes {:type (list :Vote)
            :resolve :query/votes-for-tag}
    :sorted {:args {:attribute {:type (non-null String)}}
             :type (list :Item)
             :resolve :query/sorted}
    :attributes {:type (list :String)
                 :resolve :query/attributes}
    :pair {:type :Pair
           :resolve :query/pair}}}
  
  :Item
  {:description "a named url/link/item in the system that can be voted on"
   :fields
   {:id {:type (non-null ID)}
    :name {:type (non-null String)}
    :paragraph {:type String}
    :elo {:type Float}
    :tags {:type (list :Tag)
           :resolve :query/item-tags}}}
  
  :Pair
  {:description "two items, to be voted on"
   :fields
   {:left {:type :Item}
    :right {:type :Item}}
   :resolve :query/pair-for-tag}
  
  :Vote
  {:description "a vote between to items, in a tag, with an attribute"
   :fields
   {:id {:type (non-null ID)}
    :tag {:type (non-null :Tag)
          :resolve :query/parent-tag}
    :left_item {:type (non-null :Item)
                :resolve :query/left-item}
    :right_item {:type (non-null :Item)
                 :resolve :query/right-item}
    
    :attribute {:type (non-null :String)}
    :magnitude {:type (non-null :Int)}}}}
  

 :queries
 {:tag_by_id
  {:type :Tag
   :description "return a tag based on its unique id, if it exists"
   :args {:id {:type ID}}
   :resolve :query/tag-by-id}
  :all_tags
  {:type (list :Tag)
   :description "return a list of all (public) tags"
   :args {}
   :resolve :query/all-tags}}}
